const mysql = require('mysql');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');

// create a database connection
const connection = mysql.createConnection({
  host: 'localhost',
  user: 'username',
  password: 'password',
  database: 'mydatabase'
});

// connect to the database
connection.connect((err) => {
  if (err) {
    console.error('error connecting: ' + err.stack);
    return;
  }
  console.log('connected as id ' + connection.threadId);
});

// handle user login
const handleLogin = async (req, res) => {
  const { user, pwd } = req.body;

  // validate username and password
  if(!user || !pwd) {
    return res.status(400).json({ 'message': 'username and password are required' });
  }

  try {
    // find user in database
    const query = `SELECT * FROM users WHERE username = ?`;
    connection.query(query, [user], async (error, results) => {
      if (error) {
        console.error(error);
        return res.sendStatus(500); // internal server error
      }

      if (results.length === 0) {
        return res.sendStatus(401); // unauthorized
      }

      // check password
      const match = await bcrypt.compare(pwd, results[0].password);
      if (!match) {
        return res.sendStatus(401); // unauthorized
      }

      // create JWTs
      const accessToken = jwt.sign(
        { "username": user },
        process.env.ACCESS_TOKEN_SECRET,
        { expiresIn: '30s'}
      );
      const refreshToken = jwt.sign(
        { "username": user },
        process.env.REFRESH_TOKEN_SECRET,
        { expiresIn: '1d'}
      );

      // save refresh token with current user
      const updateQuery = `UPDATE users SET refreshToken = ? WHERE id = ?`;
      connection.query(updateQuery, [refreshToken, results[0].id], (error, _results) => {
        if (error) {
          console.error(error);
          return res.sendStatus(500); // internal server error
        }
        res.cookie('jwt', refreshToken, { httpOnly: true, maxAge: 24 * 60 * 60 * 1000});
        res.json({ accessToken });
      });

    });
  } catch (error) {
    console.error(error);
    res.sendStatus(500); // internal server error
  }
};

// close the database connection
connection.end((err) => {
  if (err) {
    console.error('error ending connection: ' + err.stack);
    return;
  }
  console.log('connection ended');
});
